{"version":3,"sources":["node_modules/auto-reload-brunch/vendor/auto-reload.js","node_modules/pugjs-brunch/runtime.js"],"names":[],"mappingsrfile":"../Calculator/public/js/vendor.js","sourcesContent":["/* jshint ignore:start */\n(function() {\n  var WebSocket = window.WebSocket || window.MozWebSocket;\n  var br = window.brunch = (window.brunch || {});\n  var ar = br['auto-reload'] = (br['auto-reload'] || {});\n  if (!WebSocket || ar.disabled) return;\n  if (window._ar) return;\n  window._ar = true;\n\n  var cacheBuster = function(url){\n    var date = Math.round(Date.now() / 1000).toString();\n    url = url.replace(/(\\&|\\\\?)cacheBuster=\\d*/, '');\n    return url + (url.indexOf('?') >= 0 ? '&' : '?') +'cacheBuster=' + date;\n  };\n\n  var browser = navigator.userAgent.toLowerCase();\n  var forceRepaint = ar.forceRepaint || browser.indexOf('chrome') > -1;\n\n  var reloaders = {\n    page: function(){\n      window.location.reload(true);\n    },\n\n    stylesheet: function(){\n      [].slice\n        .call(document.querySelectorAll('link[rel=stylesheet]'))\n        .filter(function(link) {\n          var val = link.getAttribute('data-autoreload');\n          return link.href && val != 'false';\n        })\n        .forEach(function(link) {\n          link.href = cacheBuster(link.href);\n        });\n\n      // Hack to force page repaint after 25ms.\n      if (forceRepaint) setTimeout(function() { document.body.offsetHeight; }, 25);\n    },\n\n    javascript: function(){\n      var scripts = [].slice.call(document.querySelectorAll('script'));\n      var textScripts = scripts.map(function(script) { return script.text }).filter(function(text) { return text.length > 0 });\n      var srcScripts = scripts.filter(function(script) { return script.src });\n\n      var loaded = 0;\n      var all = srcScripts.length;\n      var onLoad = function() {\n        loaded = loaded + 1;\n        if (loaded === all) {\n          textScripts.forEach(function(script) { eval(script); });\n        }\n      }\n\n      srcScripts\n        .forEach(function(script) {\n          var src = script.src;\n          script.remove();\n          var newScript = document.createElement('script');\n          newScript.src = cacheBuster(src);\n          newScript.async = true;\n          newScript.onload = onLoad;\n          document.head.appendChild(newScript);\n        });\n    }\n  };\n  var port = ar.port || 9485;\n  var host = br.server || window.location.hostname || 'localhost';\n\n  var connect = function(){\n    var connection = new WebSocket('ws://' + host + ':' + port);\n    connection.onmessage = function(event){\n      if (ar.disabled) return;\n      var message = event.data;\n      var reloader = reloaders[message] || reloaders.page;\n      reloader();\n    };\n    connection.onerror = function(){\n      if (connection.readyState) connection.close();\n    };\n    connection.onclose = function(){\n      window.setTimeout(connect, 1000);\n    };\n  };\n  connect();\n})();\n/* jshint ignore:end */\n",";(typeof window!='undefined'?window:typeof global!='undefined'?global:this).pug={}\n;(function(exports){\n  'use strict';\n  \n  var pug_has_own_property = Object.prototype.hasOwnProperty;\n  \n  /**\n   * Merge two attribute objects giving precedence\n   * to values in object `b`. Classes are special-cased\n   * allowing for arrays and merging/joining appropriately\n   * resulting in a string.\n   *\n   * @param {Object} a\n   * @param {Object} b\n   * @return {Object} a\n   * @api private\n   */\n  \n  exports.merge = pug_merge;\n  function pug_merge(a, b) {\n    if (arguments.length === 1) {\n      var attrs = a[0];\n      for (var i = 1; i < a.length; i++) {\n        attrs = pug_merge(attrs, a[i]);\n      }\n      return attrs;\n    }\n  \n    for (var key in b) {\n      if (key === 'class') {\n        var valA = a[key] || [];\n        a[key] = (Array.isArray(valA) ? valA : [valA]).concat(b[key] || []);\n      } else if (key === 'style') {\n        var valA = pug_style(a[key]);\n        var valB = pug_style(b[key]);\n        a[key] = valA + (valA && valB && ';') + valB;\n      } else {\n        a[key] = b[key];\n      }\n    }\n  \n    return a;\n  };\n  \n  /**\n   * Process array, object, or string as a string of classes delimited by a space.\n   *\n   * If `val` is an array, all members of it and its subarrays are counted as\n   * classes. If `escaping` is an array, then whether or not the item in `val` is\n   * escaped depends on the corresponding item in `escaping`. If `escaping` is\n   * not an array, no escaping is done.\n   *\n   * If `val` is an object, all the keys whose value is truthy are counted as\n   * classes. No escaping is done.\n   *\n   * If `val` is a string, it is counted as a class. No escaping is done.\n   *\n   * @param {(Array.<string>|Object.<string, boolean>|string)} val\n   * @param {?Array.<string>} escaping\n   * @return {String}\n   */\n  exports.classes = pug_classes;\n  function pug_classes_array(val, escaping) {\n    var classString = '', className, padding = '', escapeEnabled = Array.isArray(escaping);\n    for (var i = 0; i < val.length; i++) {\n      className = pug_classes(val[i]);\n      if (!className) continue;\n      escapeEnabled && escaping[i] && (className = pug_escape(className));\n      classString = classString + padding + className;\n      padding = ' ';\n    }\n    return classString;\n  }\n  function pug_classes_object(val) {\n    var classString = '', padding = '';\n    for (var key in val) {\n      if (key && val[key] && pug_has_own_property.call(val, key)) {\n        classString = classString + padding + key;\n        padding = ' ';\n      }\n    }\n    return classString;\n  }\n  function pug_classes(val, escaping) {\n    if (Array.isArray(val)) {\n      return pug_classes_array(val, escaping);\n    } else if (val && typeof val === 'object') {\n      return pug_classes_object(val);\n    } else {\n      return val || '';\n    }\n  }\n  \n  /**\n   * Convert object or string to a string of CSS styles delimited by a semicolon.\n   *\n   * @param {(Object.<string, string>|string)} val\n   * @return {String}\n   */\n  \n  exports.style = pug_style;\n  function pug_style(val) {\n    if (!val) return '';\n    if (typeof val === 'object') {\n      var out = '', delim = '';\n      for (var style in val) {\n        /* istanbul ignore else */\n        if (pug_has_own_property.call(val, style)) {\n          out = out + delim + style + ':' + val[style];\n          delim = ';';\n        }\n      }\n      return out;\n    } else {\n      val = '' + val;\n      if (val[val.length - 1] === ';') return val.slice(0, -1);\n      return val;\n    }\n  };\n  \n  /**\n   * Render the given attribute.\n   *\n   * @param {String} key\n   * @param {String} val\n   * @param {Boolean} escaped\n   * @param {Boolean} terse\n   * @return {String}\n   */\n  exports.attr = pug_attr;\n  function pug_attr(key, val, escaped, terse) {\n    if (val === false || val == null || !val && (key === 'class' || key === 'style')) {\n      return '';\n    }\n    if (val === true) {\n      return ' ' + (terse ? key : key + '=\"' + key + '\"');\n    }\n    if (typeof val.toJSON === 'function') {\n      val = val.toJSON();\n    }\n    if (typeof val !== 'string') {\n      val = JSON.stringify(val);\n      if (!escaped && val.indexOf('\"') !== -1) {\n        return ' ' + key + '=\\'' + val.replace(/'/g, '&#39;') + '\\'';\n      }\n    }\n    if (escaped) val = pug_escape(val);\n    return ' ' + key + '=\"' + val + '\"';\n  };\n  \n  /**\n   * Render the given attributes object.\n   *\n   * @param {Object} obj\n   * @param {Object} terse whether to use HTML5 terse boolean attributes\n   * @return {String}\n   */\n  exports.attrs = pug_attrs;\n  function pug_attrs(obj, terse){\n    var attrs = '';\n  \n    for (var key in obj) {\n      if (pug_has_own_property.call(obj, key)) {\n        var val = obj[key];\n  \n        if ('class' === key) {\n          val = pug_classes(val);\n          attrs = pug_attr(key, val, false, terse) + attrs;\n          continue;\n        }\n        if ('style' === key) {\n          val = pug_style(val);\n        }\n        attrs += pug_attr(key, val, false, terse);\n      }\n    }\n  \n    return attrs;\n  };\n  \n  /**\n   * Escape the given string of `html`.\n   *\n   * @param {String} html\n   * @return {String}\n   * @api private\n   */\n  \n  var pug_match_html = /[\"&<>]/;\n  exports.escape = pug_escape;\n  function pug_escape(_html){\n    var html = '' + _html;\n    var regexResult = pug_match_html.exec(html);\n    if (!regexResult) return _html;\n  \n    var result = '';\n    var i, lastIndex, escape;\n    for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {\n      switch (html.charCodeAt(i)) {\n        case 34: escape = '&quot;'; break;\n        case 38: escape = '&amp;'; break;\n        case 60: escape = '&lt;'; break;\n        case 62: escape = '&gt;'; break;\n        default: continue;\n      }\n      if (lastIndex !== i) result += html.substring(lastIndex, i);\n      lastIndex = i + 1;\n      result += escape;\n    }\n    if (lastIndex !== i) return result + html.substring(lastIndex, i);\n    else return result;\n  };\n  \n  /**\n   * Re-throw the given `err` in context to the\n   * the pug in `filename` at the given `lineno`.\n   *\n   * @param {Error} err\n   * @param {String} filename\n   * @param {String} lineno\n   * @param {String} str original source\n   * @api private\n   */\n  \n  exports.rethrow = pug_rethrow;\n  function pug_rethrow(err, filename, lineno, str){\n    if (!(err instanceof Error)) throw err;\n    if ((typeof window != 'undefined' || !filename) && !str) {\n      err.message += ' on line ' + lineno;\n      throw err;\n    }\n    try {\n      str = str || require('fs').readFileSync(filename, 'utf8')\n    } catch (ex) {\n      pug_rethrow(err, null, lineno)\n    }\n    var context = 3\n      , lines = str.split('\\n')\n      , start = Math.max(lineno - context, 0)\n      , end = Math.min(lines.length, lineno + context);\n  \n    // Error context\n    var context = lines.slice(start, end).map(function(line, i){\n      var curr = i + start + 1;\n      return (curr == lineno ? '  > ' : '    ')\n        + curr\n        + '| '\n        + line;\n    }).join('\\n');\n  \n    // Alter exception message\n    err.path = filename;\n    err.message = (filename || 'Pug') + ':' + lineno\n      + '\\n' + context + '\\n\\n' + err.message;\n    throw err;\n  };\n\n})(pug);\n"]}